////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : res.vf
// /___/   /\     Timestamp : 12/07/2019 13:18:22
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/work/2D/Digital/lab/Lab7Clock/res.vf -w D:/work/2D/Digital/lab/Lab7Clock/res.sch
//Design Name: res
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_res(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module CB4CE_HXILINX_res(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_res(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_res(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_res (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_res(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module SECONDDD_MUSER_res(Clk_IN, 
                          Enabled, 
                          Reset, 
                          D0, 
                          D1, 
                          TC);

    input Clk_IN;
    input Enabled;
    input Reset;
   output [0:3] D0;
   output [0:3] D1;
   output TC;
   
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_53;
   wire [0:3] D0_DUMMY;
   wire [0:3] D1_DUMMY;
   wire TC_DUMMY;
   
   assign D0[0:3] = D0_DUMMY[0:3];
   assign D1[0:3] = D1_DUMMY[0:3];
   assign TC = TC_DUMMY;
   (* HU_SET = "XLXI_11_0" *) 
   CB4CE_HXILINX_res  XLXI_11 (.C(Clk_IN), 
                              .CE(Enabled), 
                              .CLR(XLXN_50), 
                              .CEO(), 
                              .Q0(D0_DUMMY[0]), 
                              .Q1(D0_DUMMY[1]), 
                              .Q2(D0_DUMMY[2]), 
                              .Q3(D0_DUMMY[3]), 
                              .TC());
   (* HU_SET = "XLXI_12_1" *) 
   CB4CE_HXILINX_res  XLXI_12 (.C(XLXN_51), 
                              .CE(Enabled), 
                              .CLR(XLXN_53), 
                              .CEO(), 
                              .Q0(D1_DUMMY[0]), 
                              .Q1(D1_DUMMY[1]), 
                              .Q2(D1_DUMMY[2]), 
                              .Q3(D1_DUMMY[3]), 
                              .TC());
   AND2  XLXI_13 (.I0(D0_DUMMY[3]), 
                 .I1(D0_DUMMY[1]), 
                 .O(XLXN_51));
   AND2  XLXI_14 (.I0(D1_DUMMY[2]), 
                 .I1(D1_DUMMY[1]), 
                 .O(TC_DUMMY));
   AND2B1  XLXI_16 (.I0(Enabled), 
                   .I1(Reset), 
                   .O(XLXN_49));
   OR2  XLXI_17 (.I0(XLXN_49), 
                .I1(XLXN_51), 
                .O(XLXN_50));
   OR2  XLXI_18 (.I0(XLXN_49), 
                .I1(TC_DUMMY), 
                .O(XLXN_53));
endmodule
`timescale 1ns / 1ps

module Decoder_MUSER_res(q0, 
                         q1, 
                         com);

    input q0;
    input q1;
   output [3:0] com;
   
   
   OR2  XLXI_1 (.I0(q0), 
               .I1(q1), 
               .O(com[0]));
   OR2B1  XLXI_2 (.I0(q0), 
                 .I1(q1), 
                 .O(com[1]));
   OR2B1  XLXI_3 (.I0(q1), 
                 .I1(q0), 
                 .O(com[2]));
   OR2B2  XLXI_4 (.I0(q1), 
                 .I1(q0), 
                 .O(com[3]));
endmodule
`timescale 1ns / 1ps

module MUXX_MUSER_res(Clk_IN, 
                      Clk_P, 
                      D0, 
                      D1, 
                      D2, 
                      D3, 
                      A, 
                      B, 
                      C, 
                      com, 
                      D, 
                      P);

    input Clk_IN;
    input Clk_P;
    input [0:3] D0;
    input [0:3] D1;
    input [0:3] D2;
    input [0:3] D3;
   output A;
   output B;
   output C;
   output [3:0] com;
   output D;
   output P;
   
   wire XLXN_53;
   wire XLXN_124;
   wire XLXN_127;
   wire XLXN_128;
   
   (* HU_SET = "XLXI_1_2" *) 
   M4_1E_HXILINX_res  XLXI_1 (.D0(D0[0]), 
                             .D1(D1[0]), 
                             .D2(D2[0]), 
                             .D3(D3[0]), 
                             .E(XLXN_124), 
                             .S0(XLXN_127), 
                             .S1(XLXN_128), 
                             .O(A));
   (* HU_SET = "XLXI_2_3" *) 
   M4_1E_HXILINX_res  XLXI_2 (.D0(D0[1]), 
                             .D1(D1[1]), 
                             .D2(D2[1]), 
                             .D3(D3[1]), 
                             .E(XLXN_124), 
                             .S0(XLXN_127), 
                             .S1(XLXN_128), 
                             .O(B));
   (* HU_SET = "XLXI_3_4" *) 
   M4_1E_HXILINX_res  XLXI_3 (.D0(D0[2]), 
                             .D1(D1[2]), 
                             .D2(D2[2]), 
                             .D3(D3[2]), 
                             .E(XLXN_124), 
                             .S0(XLXN_127), 
                             .S1(XLXN_128), 
                             .O(C));
   (* HU_SET = "XLXI_4_5" *) 
   M4_1E_HXILINX_res  XLXI_4 (.D0(D0[3]), 
                             .D1(D1[3]), 
                             .D2(D2[3]), 
                             .D3(D3[3]), 
                             .E(XLXN_124), 
                             .S0(XLXN_127), 
                             .S1(XLXN_128), 
                             .O(D));
   (* HU_SET = "XLXI_5_6" *) 
   CB2CE_HXILINX_res  XLXI_5 (.C(XLXN_53), 
                             .CE(XLXN_124), 
                             .CLR(), 
                             .CEO(), 
                             .Q0(XLXN_127), 
                             .Q1(XLXN_128), 
                             .TC());
   VCC  XLXI_7 (.P(XLXN_124));
   (* HU_SET = "XLXI_17_7" *) 
   FTC_HXILINX_res  XLXI_17 (.C(Clk_IN), 
                            .CLR(), 
                            .T(XLXN_124), 
                            .Q(XLXN_53));
   (* HU_SET = "XLXI_35_8" *) 
   M4_1E_HXILINX_res  XLXI_35 (.D0(), 
                              .D1(), 
                              .D2(Clk_P), 
                              .D3(), 
                              .E(XLXN_124), 
                              .S0(XLXN_127), 
                              .S1(XLXN_128), 
                              .O(P));
   Decoder_MUSER_res  XLXI_36 (.q0(XLXN_127), 
                              .q1(XLXN_128), 
                              .com(com[3:0]));
endmodule
`timescale 1ns / 1ps

module div5_2_MUSER_res(Clk_IN, 
                        Clk_OUT);

    input Clk_IN;
   output Clk_OUT;
   
   wire XLXN_2;
   wire XLXN_3;
   wire Clk_OUT_DUMMY;
   
   assign Clk_OUT = Clk_OUT_DUMMY;
   VCC  XLXI_2 (.P(XLXN_3));
   AND2  XLXI_3 (.I0(Clk_IN), 
                .I1(XLXN_3), 
                .O(XLXN_2));
   (* HU_SET = "XLXI_10_9" *) 
   CD4RE_HXILINX_res  XLXI_10 (.C(XLXN_2), 
                              .CE(XLXN_3), 
                              .R(Clk_OUT_DUMMY), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(Clk_OUT_DUMMY), 
                              .Q3(), 
                              .TC());
endmodule
`timescale 1ns / 1ps

module div10_3_MUSER_res(Clk_IN, 
                         Clk_OUT);

    input Clk_IN;
   output Clk_OUT;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_19;
   wire XLXN_20;
   
   AND2  XLXI_2 (.I0(Clk_IN), 
                .I1(XLXN_2), 
                .O(XLXN_1));
   VCC  XLXI_3 (.P(XLXN_2));
   (* HU_SET = "XLXI_11_10" *) 
   CD4CE_HXILINX_res  XLXI_11 (.C(XLXN_1), 
                              .CE(XLXN_2), 
                              .CLR(XLXN_20), 
                              .CEO(XLXN_19), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   INV  XLXI_12 (.I(XLXN_19), 
                .O(Clk_OUT));
   GND  XLXI_13 (.G(XLXN_20));
endmodule
`timescale 1ns / 1ps

module DivideClk_MUSER_res(Clk_IN, 
                           Clk_OUT);

    input Clk_IN;
   output Clk_OUT;
   
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_63;
   wire XLXN_64;
   
   div10_3_MUSER_res  XLXI_15 (.Clk_IN(Clk_IN), 
                              .Clk_OUT(XLXN_5));
   div10_3_MUSER_res  XLXI_16 (.Clk_IN(XLXN_5), 
                              .Clk_OUT(XLXN_6));
   div10_3_MUSER_res  XLXI_18 (.Clk_IN(XLXN_6), 
                              .Clk_OUT(XLXN_7));
   div10_3_MUSER_res  XLXI_19 (.Clk_IN(XLXN_7), 
                              .Clk_OUT(XLXN_8));
   div5_2_MUSER_res  XLXI_57 (.Clk_IN(XLXN_8), 
                             .Clk_OUT(XLXN_63));
   (* HU_SET = "XLXI_58_11" *) 
   FTC_HXILINX_res  XLXI_58 (.C(XLXN_63), 
                            .CLR(), 
                            .T(XLXN_64), 
                            .Q(Clk_OUT));
   VCC  XLXI_59 (.P(XLXN_64));
endmodule
`timescale 1ns / 1ps

module Min_MUSER_res(Clk_IN, 
                     Enabled, 
                     Reset, 
                     D2, 
                     D3);

    input Clk_IN;
    input Enabled;
    input Reset;
   output [0:3] D2;
   output [0:3] D3;
   
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire [0:3] D2_DUMMY;
   wire [0:3] D3_DUMMY;
   
   assign D2[0:3] = D2_DUMMY[0:3];
   assign D3[0:3] = D3_DUMMY[0:3];
   (* HU_SET = "XLXI_1_12" *) 
   CB4CE_HXILINX_res  XLXI_1 (.C(Clk_IN), 
                             .CE(Enabled), 
                             .CLR(XLXN_40), 
                             .CEO(), 
                             .Q0(D2_DUMMY[0]), 
                             .Q1(D2_DUMMY[1]), 
                             .Q2(D2_DUMMY[2]), 
                             .Q3(D2_DUMMY[3]), 
                             .TC());
   (* HU_SET = "XLXI_2_13" *) 
   CB4CE_HXILINX_res  XLXI_2 (.C(XLXN_39), 
                             .CE(Enabled), 
                             .CLR(XLXN_41), 
                             .CEO(), 
                             .Q0(D3_DUMMY[0]), 
                             .Q1(D3_DUMMY[1]), 
                             .Q2(D3_DUMMY[2]), 
                             .Q3(D3_DUMMY[3]), 
                             .TC());
   AND2  XLXI_3 (.I0(D2_DUMMY[3]), 
                .I1(D2_DUMMY[1]), 
                .O(XLXN_39));
   AND2  XLXI_4 (.I0(D3_DUMMY[3]), 
                .I1(D3_DUMMY[1]), 
                .O(XLXN_42));
   AND2B1  XLXI_5 (.I0(Enabled), 
                  .I1(Reset), 
                  .O(XLXN_38));
   OR2  XLXI_6 (.I0(XLXN_39), 
               .I1(XLXN_38), 
               .O(XLXN_40));
   OR2  XLXI_7 (.I0(XLXN_42), 
               .I1(XLXN_38), 
               .O(XLXN_41));
endmodule
`timescale 1ns / 1ps

module SevenSeg_MUSER_res(A, 
                          B, 
                          C, 
                          D, 
                          P, 
                          SegA, 
                          SegB, 
                          SegC, 
                          SegD, 
                          SegE, 
                          SegF, 
                          SegG, 
                          SegP);

    input A;
    input B;
    input C;
    input D;
    input P;
   output SegA;
   output SegB;
   output SegC;
   output SegD;
   output SegE;
   output SegF;
   output SegG;
   output SegP;
   
   wire XLXN_1;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_55;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_64;
   wire XLXN_76;
   wire XLXN_79;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_87;
   wire XLXN_88;
   wire XLXN_91;
   wire XLXN_93;
   wire XLXN_96;
   wire XLXN_99;
   wire XLXN_102;
   wire XLXN_105;
   wire XLXN_111;
   wire XLXN_112;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_116;
   
   OR3  XLXI_1 (.I0(XLXN_1), 
               .I1(D), 
               .I2(B), 
               .O(SegA));
   XNOR2  XLXI_2 (.I0(C), 
                 .I1(A), 
                 .O(XLXN_1));
   OR3  XLXI_3 (.I0(XLXN_10), 
               .I1(XLXN_9), 
               .I2(D), 
               .O(SegB));
   INV  XLXI_4 (.I(C), 
               .O(XLXN_9));
   XNOR2  XLXI_5 (.I0(B), 
                 .I1(A), 
                 .O(XLXN_10));
   OR4  XLXI_6 (.I0(D), 
               .I1(C), 
               .I2(XLXN_11), 
               .I3(A), 
               .O(SegC));
   INV  XLXI_7 (.I(B), 
               .O(XLXN_11));
   OR2  XLXI_8 (.I0(XLXN_61), 
               .I1(XLXN_60), 
               .O(XLXN_55));
   XOR2  XLXI_9 (.I0(B), 
                .I1(A), 
                .O(XLXN_61));
   AND2  XLXI_10 (.I0(XLXN_64), 
                 .I1(XLXN_55), 
                 .O(XLXN_79));
   OR3  XLXI_11 (.I0(XLXN_76), 
                .I1(B), 
                .I2(C), 
                .O(XLXN_64));
   INV  XLXI_12 (.I(C), 
                .O(XLXN_60));
   INV  XLXI_13 (.I(A), 
                .O(XLXN_76));
   OR2  XLXI_14 (.I0(D), 
                .I1(XLXN_79), 
                .O(SegD));
   AND2  XLXI_15 (.I0(XLXN_82), 
                 .I1(XLXN_91), 
                 .O(SegE));
   OR2  XLXI_16 (.I0(XLXN_83), 
                .I1(XLXN_87), 
                .O(XLXN_82));
   AND2  XLXI_17 (.I0(B), 
                 .I1(XLXN_84), 
                 .O(XLXN_83));
   INV  XLXI_18 (.I(D), 
                .O(XLXN_84));
   INV  XLXI_19 (.I(XLXN_88), 
                .O(XLXN_87));
   OR2  XLXI_20 (.I0(C), 
                .I1(B), 
                .O(XLXN_88));
   INV  XLXI_21 (.I(A), 
                .O(XLXN_91));
   AND2  XLXI_22 (.I0(XLXN_99), 
                 .I1(XLXN_93), 
                 .O(SegF));
   OR3  XLXI_23 (.I0(XLXN_96), 
                .I1(C), 
                .I2(D), 
                .O(XLXN_93));
   XNOR2  XLXI_24 (.I0(A), 
                  .I1(B), 
                  .O(XLXN_96));
   OR3  XLXI_35 (.I0(XLXN_105), 
                .I1(XLXN_102), 
                .I2(D), 
                .O(XLXN_99));
   INV  XLXI_36 (.I(A), 
                .O(XLXN_102));
   INV  XLXI_37 (.I(B), 
                .O(XLXN_105));
   OR2  XLXI_38 (.I0(XLXN_111), 
                .I1(D), 
                .O(SegG));
   AND2  XLXI_39 (.I0(XLXN_114), 
                 .I1(XLXN_112), 
                 .O(XLXN_111));
   OR2  XLXI_40 (.I0(C), 
                .I1(B), 
                .O(XLXN_112));
   AND3  XLXI_41 (.I0(C), 
                 .I1(B), 
                 .I2(A), 
                 .O(XLXN_113));
   INV  XLXI_42 (.I(XLXN_113), 
                .O(XLXN_114));
   INV  XLXI_44 (.I(P), 
                .O(XLXN_116));
   INV  XLXI_46 (.I(XLXN_116), 
                .O(SegP));
endmodule
`timescale 1ns / 1ps

module div2_MUSER_res(Clk_IN, 
                      Clk_OUT);

    input Clk_IN;
   output Clk_OUT;
   
   wire XLXN_4;
   wire Clk_OUT_DUMMY;
   
   assign Clk_OUT = Clk_OUT_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(Clk_IN), 
              .D(XLXN_4), 
              .Q(Clk_OUT_DUMMY));
   INV  XLXI_2 (.I(Clk_OUT_DUMMY), 
               .O(XLXN_4));
endmodule
`timescale 1ns / 1ps

module ClkForSeven_MUSER_res(Clk_IN, 
                             Clk_OUT);

    input Clk_IN;
   output Clk_OUT;
   
   wire XLXN_3;
   wire XLXN_4;
   
   div2_MUSER_res  XLXI_1 (.Clk_IN(Clk_IN), 
                          .Clk_OUT(XLXN_3));
   div10_3_MUSER_res  XLXI_6 (.Clk_IN(XLXN_3), 
                             .Clk_OUT(XLXN_4));
   div10_3_MUSER_res  XLXI_7 (.Clk_IN(XLXN_4), 
                             .Clk_OUT(Clk_OUT));
endmodule
`timescale 1ns / 1ps

module res(Button_P47, 
           Clk_P123, 
           Reset_P48, 
           com, 
           SegA_P41, 
           SegB_P40, 
           SegC_P35, 
           SegD_P34, 
           SegE_P32, 
           SegF_P29, 
           SegG_P27, 
           SegP_P26);

   (* CLOCK_DEDICATED_ROUTE = "FALSE" *) 
    input Button_P47;
    input Clk_P123;
    input Reset_P48;
   output [3:0] com;
   output SegA_P41;
   output SegB_P40;
   output SegC_P35;
   output SegD_P34;
   output SegE_P32;
   output SegF_P29;
   output SegG_P27;
   output SegP_P26;
   
   wire Set_P47;
   wire XLXN_12;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire [0:3] XLXN_58;
   wire [0:3] XLXN_59;
   wire XLXN_65;
   wire XLXN_71;
   wire [0:3] XLXN_74;
   wire [0:3] XLXN_75;
   wire XLXN_78;
   
   ClkForSeven_MUSER_res  XLXI_14 (.Clk_IN(Clk_P123), 
                                  .Clk_OUT(XLXN_12));
   SevenSeg_MUSER_res  XLXI_15 (.A(XLXN_28), 
                               .B(XLXN_29), 
                               .C(XLXN_30), 
                               .D(XLXN_31), 
                               .P(XLXN_32), 
                               .SegA(SegA_P41), 
                               .SegB(SegB_P40), 
                               .SegC(SegC_P35), 
                               .SegD(SegD_P34), 
                               .SegE(SegE_P32), 
                               .SegF(SegF_P29), 
                               .SegG(SegG_P27), 
                               .SegP(SegP_P26));
   Min_MUSER_res  XLXI_16 (.Clk_IN(XLXN_71), 
                          .Enabled(Set_P47), 
                          .Reset(Reset_P48), 
                          .D2(XLXN_58[0:3]), 
                          .D3(XLXN_59[0:3]));
   DivideClk_MUSER_res  XLXI_18 (.Clk_IN(XLXN_12), 
                                .Clk_OUT(XLXN_78));
   MUXX_MUSER_res  XLXI_19 (.Clk_IN(XLXN_12), 
                           .Clk_P(XLXN_78), 
                           .D0(XLXN_74[0:3]), 
                           .D1(XLXN_75[0:3]), 
                           .D2(XLXN_58[0:3]), 
                           .D3(XLXN_59[0:3]), 
                           .A(XLXN_28), 
                           .B(XLXN_29), 
                           .C(XLXN_30), 
                           .com(com[3:0]), 
                           .D(XLXN_31), 
                           .P(XLXN_32));
   (* HU_SET = "XLXI_22_14" *) 
   FTC_HXILINX_res  XLXI_22 (.C(Button_P47), 
                            .CLR(), 
                            .T(XLXN_65), 
                            .Q(Set_P47));
   VCC  XLXI_23 (.P(XLXN_65));
   SECONDDD_MUSER_res  XLXI_27 (.Clk_IN(XLXN_78), 
                               .Enabled(Set_P47), 
                               .Reset(Reset_P48), 
                               .D0(XLXN_74[0:3]), 
                               .D1(XLXN_75[0:3]), 
                               .TC(XLXN_71));
endmodule
