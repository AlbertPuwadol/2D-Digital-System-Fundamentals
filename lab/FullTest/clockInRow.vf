////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : clockInRow.vf
// /___/   /\     Timestamp : 12/16/2019 07:07:47
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/work/2D/Digital/lab/FullTest/clockInRow.vf -w D:/work/2D/Digital/lab/FullTest/clockInRow.sch
//Design Name: clockInRow
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_clockInRow(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_clockInRow(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_clockInRow (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_clockInRow(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module divide20M_MUSER_clockInRow(ClkIn, 
                                  ClkOut);

    input ClkIn;
   output ClkOut;
   
   wire XLXN_1;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_13;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_19;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_31;
   
   (* HU_SET = "XLXI_1_188" *) 
   CD4RE_HXILINX_clockInRow  XLXI_1 (.C(ClkIn), 
                                    .CE(XLXN_31), 
                                    .R(), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_1));
   (* HU_SET = "XLXI_3_189" *) 
   CD4RE_HXILINX_clockInRow  XLXI_3 (.C(XLXN_13), 
                                    .CE(XLXN_31), 
                                    .R(), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_16));
   (* HU_SET = "XLXI_4_190" *) 
   CD4RE_HXILINX_clockInRow  XLXI_4 (.C(XLXN_17), 
                                    .CE(XLXN_31), 
                                    .R(), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_21));
   (* HU_SET = "XLXI_5_192" *) 
   CD4RE_HXILINX_clockInRow  XLXI_5 (.C(XLXN_22), 
                                    .CE(XLXN_31), 
                                    .R(), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_19));
   (* HU_SET = "XLXI_6_191" *) 
   CD4RE_HXILINX_clockInRow  XLXI_6 (.C(XLXN_8), 
                                    .CE(XLXN_31), 
                                    .R(), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_9));
   INV  XLXI_10 (.I(XLXN_1), 
                .O(XLXN_13));
   INV  XLXI_11 (.I(XLXN_16), 
                .O(XLXN_17));
   INV  XLXI_12 (.I(XLXN_21), 
                .O(XLXN_22));
   INV  XLXI_13 (.I(XLXN_9), 
                .O(XLXN_26));
   INV  XLXI_14 (.I(XLXN_25), 
                .O(XLXN_27));
   INV  XLXI_15 (.I(XLXN_19), 
                .O(XLXN_8));
   (* HU_SET = "XLXI_16_193" *) 
   CD4RE_HXILINX_clockInRow  XLXI_16 (.C(XLXN_26), 
                                     .CE(XLXN_31), 
                                     .R(), 
                                     .CEO(), 
                                     .Q0(), 
                                     .Q1(), 
                                     .Q2(), 
                                     .Q3(), 
                                     .TC(XLXN_25));
   (* HU_SET = "XLXI_18_194" *) 
   FTC_HXILINX_clockInRow  XLXI_18 (.C(XLXN_27), 
                                   .CLR(), 
                                   .T(XLXN_31), 
                                   .Q(ClkOut));
   VCC  XLXI_19 (.P(XLXN_31));
endmodule
`timescale 1ns / 1ps

module clockInRow(CLk, 
                  ClkOut, 
                  row);

    input CLk;
   output ClkOut;
   output [0:3] row;
   
   wire XLXN_2;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_27;
   wire ClkOut_DUMMY;
   
   assign ClkOut = ClkOut_DUMMY;
   divide20M_MUSER_clockInRow  XLXI_1 (.ClkIn(CLk), 
                                      .ClkOut(ClkOut_DUMMY));
   (* HU_SET = "XLXI_2_195" *) 
   CB2CE_HXILINX_clockInRow  XLXI_2 (.C(ClkOut_DUMMY), 
                                    .CE(XLXN_6), 
                                    .CLR(XLXN_27), 
                                    .CEO(), 
                                    .Q0(XLXN_2), 
                                    .Q1(XLXN_5), 
                                    .TC());
   (* HU_SET = "XLXI_3_196" *) 
   D2_4E_HXILINX_clockInRow  XLXI_3 (.A0(XLXN_2), 
                                    .A1(XLXN_5), 
                                    .E(XLXN_6), 
                                    .D0(row[0]), 
                                    .D1(row[1]), 
                                    .D2(row[2]), 
                                    .D3(row[3]));
   VCC  XLXI_4 (.P(XLXN_6));
   GND  XLXI_5 (.G(XLXN_27));
endmodule
