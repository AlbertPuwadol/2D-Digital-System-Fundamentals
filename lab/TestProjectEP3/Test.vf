////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Test.vf
// /___/   /\     Timestamp : 12/14/2019 01:52:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/work/2D/Digital/lab/TestProjectEP3/Test.vf -w D:/work/2D/Digital/lab/TestProjectEP3/Test.sch
//Design Name: Test
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_Test(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_Test(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2RE_HXILINX_Test(CEO, Q0, Q1, TC, C, CE, R);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C)
     begin
	if (R)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT); 
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Test (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_Test (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB4RE_HXILINX_Test(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   localparam TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3,Q2,Q1,Q0} <= {Q3,Q2,Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q3,Q2,Q1,Q0} == TERMINAL_COUNT); 
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_Test (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Test(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module DividerForNumber_MUSER_Test(Clk_In, 
                                   Clk_Out);

    input Clk_In;
   output Clk_Out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_15;
   wire XLXN_17;
   wire XLXN_31;
   
   (* HU_SET = "XLXI_1_58" *) 
   CD4RE_HXILINX_Test  XLXI_1 (.C(Clk_In), 
                              .CE(XLXN_12), 
                              .R(XLXN_17), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_9));
   (* HU_SET = "XLXI_2_59" *) 
   CD4RE_HXILINX_Test  XLXI_2 (.C(XLXN_8), 
                              .CE(XLXN_12), 
                              .R(XLXN_17), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_5));
   (* HU_SET = "XLXI_3_60" *) 
   CD4RE_HXILINX_Test  XLXI_3 (.C(XLXN_6), 
                              .CE(XLXN_12), 
                              .R(XLXN_17), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_13));
   (* HU_SET = "XLXI_4_61" *) 
   CD4RE_HXILINX_Test  XLXI_4 (.C(XLXN_10), 
                              .CE(XLXN_12), 
                              .R(XLXN_17), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_7));
   INV  XLXI_5 (.I(XLXN_9), 
               .O(XLXN_10));
   INV  XLXI_6 (.I(XLXN_7), 
               .O(XLXN_8));
   INV  XLXI_7 (.I(XLXN_5), 
               .O(XLXN_6));
   VCC  XLXI_8 (.P(XLXN_12));
   GND  XLXI_9 (.G(XLXN_17));
   INV  XLXI_10 (.I(XLXN_13), 
                .O(XLXN_15));
   (* HU_SET = "XLXI_11_62" *) 
   CD4RE_HXILINX_Test  XLXI_11 (.C(XLXN_15), 
                               .CE(XLXN_12), 
                               .R(XLXN_17), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_1));
   INV  XLXI_12 (.I(XLXN_1), 
                .O(XLXN_2));
   (* HU_SET = "XLXI_13_63" *) 
   CD4RE_HXILINX_Test  XLXI_13 (.C(XLXN_2), 
                               .CE(XLXN_12), 
                               .R(XLXN_17), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_3));
   INV  XLXI_14 (.I(XLXN_3), 
                .O(XLXN_4));
   (* HU_SET = "XLXI_15_64" *) 
   CD4RE_HXILINX_Test  XLXI_15 (.C(XLXN_4), 
                               .CE(XLXN_12), 
                               .R(XLXN_31), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(XLXN_31), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_16_65" *) 
   FTC_HXILINX_Test  XLXI_16 (.C(XLXN_31), 
                             .CLR(XLXN_17), 
                             .T(XLXN_12), 
                             .Q(Clk_Out));
endmodule
`timescale 1ns / 1ps

module DividerFor7segment_MUSER_Test(Clk_in, 
                                     Clk_out);

    input Clk_in;
   output Clk_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_9;
   wire XLXN_12;
   wire XLXN_16;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire Clk_out_DUMMY;
   
   assign Clk_out = Clk_out_DUMMY;
   (* HU_SET = "XLXI_1_66" *) 
   CB4RE_HXILINX_Test  XLXI_1 (.C(Clk_in), 
                              .CE(XLXN_12), 
                              .R(XLXN_9), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_1));
   (* HU_SET = "XLXI_2_67" *) 
   CB4RE_HXILINX_Test  XLXI_2 (.C(XLXN_2), 
                              .CE(XLXN_12), 
                              .R(XLXN_9), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_3));
   (* HU_SET = "XLXI_3_68" *) 
   CB4RE_HXILINX_Test  XLXI_3 (.C(XLXN_4), 
                              .CE(XLXN_12), 
                              .R(XLXN_9), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_5));
   (* HU_SET = "XLXI_4_69" *) 
   CB4RE_HXILINX_Test  XLXI_4 (.C(XLXN_6), 
                              .CE(XLXN_12), 
                              .R(XLXN_9), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_7));
   INV  XLXI_5 (.I(XLXN_1), 
               .O(XLXN_2));
   INV  XLXI_7 (.I(XLXN_3), 
               .O(XLXN_4));
   INV  XLXI_8 (.I(XLXN_5), 
               .O(XLXN_6));
   FDR  XLXI_9 (.C(XLXN_32), 
               .D(XLXN_16), 
               .R(XLXN_9), 
               .Q(Clk_out_DUMMY));
   INV  XLXI_11 (.I(Clk_out_DUMMY), 
                .O(XLXN_16));
   VCC  XLXI_12 (.P(XLXN_12));
   GND  XLXI_13 (.G(XLXN_9));
   (* HU_SET = "XLXI_14_70" *) 
   CB4RE_HXILINX_Test  XLXI_14 (.C(XLXN_33), 
                               .CE(XLXN_12), 
                               .R(XLXN_9), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_31));
   INV  XLXI_15 (.I(XLXN_31), 
                .O(XLXN_32));
   INV  XLXI_16 (.I(XLXN_7), 
                .O(XLXN_33));
endmodule
`timescale 1ns / 1ps

module Increase_MUSER_Test(Clk, 
                           E, 
                           number, 
                           Shift, 
                           com0, 
                           com1, 
                           com2, 
                           com3, 
                           data);

    input Clk;
    input E;
    input number;
    input Shift;
   output com0;
   output com1;
   output com2;
   output com3;
   output [3:0] data;
   
   wire Add;
   wire Enable;
   wire [3:0] ind0;
   wire [3:0] ind1;
   wire [3:0] ind2;
   wire [3:0] ind3;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_36;
   wire XLXN_42;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_123;
   wire XLXN_124;
   wire XLXN_169;
   wire XLXN_181;
   wire XLXN_223;
   wire XLXN_230;
   wire XLXN_242;
   wire XLXN_243;
   wire XLXN_244;
   wire XLXN_245;
   wire XLXN_253;
   wire XLXN_256;
   wire XLXN_263;
   wire XLXN_266;
   wire XLXN_280;
   
   (* HU_SET = "XLXI_1_71" *) 
   CD4RE_HXILINX_Test  XLXI_1 (.C(Add), 
                              .CE(XLXN_36), 
                              .R(XLXN_280), 
                              .CEO(), 
                              .Q0(ind0[0]), 
                              .Q1(ind0[1]), 
                              .Q2(ind0[2]), 
                              .Q3(ind0[3]), 
                              .TC());
   (* HU_SET = "XLXI_2_72" *) 
   CD4RE_HXILINX_Test  XLXI_2 (.C(Add), 
                              .CE(XLXN_223), 
                              .R(XLXN_280), 
                              .CEO(), 
                              .Q0(ind1[0]), 
                              .Q1(ind1[1]), 
                              .Q2(ind1[2]), 
                              .Q3(ind1[3]), 
                              .TC());
   (* HU_SET = "XLXI_3_73" *) 
   CD4RE_HXILINX_Test  XLXI_3 (.C(Add), 
                              .CE(XLXN_42), 
                              .R(XLXN_280), 
                              .CEO(), 
                              .Q0(ind2[0]), 
                              .Q1(ind2[1]), 
                              .Q2(ind2[2]), 
                              .Q3(ind2[3]), 
                              .TC());
   (* HU_SET = "XLXI_4_74" *) 
   CD4RE_HXILINX_Test  XLXI_4 (.C(Add), 
                              .CE(XLXN_256), 
                              .R(XLXN_280), 
                              .CEO(), 
                              .Q0(ind3[0]), 
                              .Q1(ind3[1]), 
                              .Q2(ind3[2]), 
                              .Q3(ind3[3]), 
                              .TC());
   (* HU_SET = "XLXI_14_75" *) 
   D2_4E_HXILINX_Test  XLXI_14 (.A0(XLXN_26), 
                               .A1(XLXN_27), 
                               .E(E), 
                               .D0(XLXN_36), 
                               .D1(XLXN_223), 
                               .D2(XLXN_42), 
                               .D3(XLXN_256));
   (* HU_SET = "XLXI_16_0_79" *) 
   M4_1E_HXILINX_Test  XLXI_16_0 (.D0(ind0[0]), 
                                 .D1(ind1[0]), 
                                 .D2(ind2[0]), 
                                 .D3(ind3[0]), 
                                 .E(Enable), 
                                 .S0(XLXN_110), 
                                 .S1(XLXN_111), 
                                 .O(data[0]));
   (* HU_SET = "XLXI_16_1_78" *) 
   M4_1E_HXILINX_Test  XLXI_16_1 (.D0(ind0[1]), 
                                 .D1(ind1[1]), 
                                 .D2(ind2[1]), 
                                 .D3(ind3[1]), 
                                 .E(Enable), 
                                 .S0(XLXN_110), 
                                 .S1(XLXN_111), 
                                 .O(data[1]));
   (* HU_SET = "XLXI_16_2_77" *) 
   M4_1E_HXILINX_Test  XLXI_16_2 (.D0(ind0[2]), 
                                 .D1(ind1[2]), 
                                 .D2(ind2[2]), 
                                 .D3(ind3[2]), 
                                 .E(Enable), 
                                 .S0(XLXN_110), 
                                 .S1(XLXN_111), 
                                 .O(data[2]));
   (* HU_SET = "XLXI_16_3_76" *) 
   M4_1E_HXILINX_Test  XLXI_16_3 (.D0(ind0[3]), 
                                 .D1(ind1[3]), 
                                 .D2(ind2[3]), 
                                 .D3(ind3[3]), 
                                 .E(Enable), 
                                 .S0(XLXN_110), 
                                 .S1(XLXN_111), 
                                 .O(data[3]));
   (* HU_SET = "XLXI_18_80" *) 
   CB2RE_HXILINX_Test  XLXI_18 (.C(XLXN_230), 
                               .CE(Enable), 
                               .R(XLXN_280), 
                               .CEO(), 
                               .Q0(XLXN_110), 
                               .Q1(XLXN_111), 
                               .TC());
   (* HU_SET = "XLXI_19_82" *) 
   D2_4E_HXILINX_Test  XLXI_19 (.A0(XLXN_110), 
                               .A1(XLXN_111), 
                               .E(Enable), 
                               .D0(XLXN_123), 
                               .D1(XLXN_124), 
                               .D2(XLXN_253), 
                               .D3(XLXN_263));
   DividerFor7segment_MUSER_Test  XLXI_24 (.Clk_in(Clk), 
                                          .Clk_out(XLXN_230));
   AND2  XLXI_27 (.I0(XLXN_169), 
                 .I1(number), 
                 .O(Add));
   DividerForNumber_MUSER_Test  XLXI_28 (.Clk_In(Clk), 
                                        .Clk_Out(XLXN_169));
   VCC  XLXI_29 (.P(Enable));
   INV  XLXI_33 (.I(E), 
                .O(XLXN_181));
   (* HU_SET = "XLXI_34_81" *) 
   CB2CE_HXILINX_Test  XLXI_34 (.C(Shift), 
                               .CE(E), 
                               .CLR(XLXN_181), 
                               .CEO(), 
                               .Q0(XLXN_26), 
                               .Q1(XLXN_27), 
                               .TC());
   (* HU_SET = "XLXI_48_83" *) 
   M2_1_HXILINX_Test  XLXI_48 (.D0(XLXN_123), 
                              .D1(XLXN_266), 
                              .S0(XLXN_36), 
                              .O(XLXN_242));
   (* HU_SET = "XLXI_50_84" *) 
   M2_1_HXILINX_Test  XLXI_50 (.D0(XLXN_124), 
                              .D1(XLXN_266), 
                              .S0(XLXN_223), 
                              .O(XLXN_243));
   (* HU_SET = "XLXI_51_85" *) 
   M2_1_HXILINX_Test  XLXI_51 (.D0(XLXN_253), 
                              .D1(XLXN_266), 
                              .S0(XLXN_42), 
                              .O(XLXN_244));
   (* HU_SET = "XLXI_52_86" *) 
   M2_1_HXILINX_Test  XLXI_52 (.D0(XLXN_263), 
                              .D1(XLXN_266), 
                              .S0(XLXN_256), 
                              .O(XLXN_245));
   INV  XLXI_59 (.I(XLXN_242), 
                .O(com0));
   INV  XLXI_60 (.I(XLXN_243), 
                .O(com1));
   INV  XLXI_61 (.I(XLXN_244), 
                .O(com2));
   INV  XLXI_62 (.I(XLXN_245), 
                .O(com3));
   GND  XLXI_65 (.G(XLXN_266));
   GND  XLXI_68 (.G(XLXN_280));
endmodule
`timescale 1ns / 1ps

module SvnEnable_MUSER_Test(A, 
                            B, 
                            C, 
                            D, 
                            Enabled, 
                            P, 
                            SegA, 
                            SegB, 
                            SegC, 
                            SegD, 
                            SegE, 
                            SegF, 
                            SegG, 
                            SegP);

    input A;
    input B;
    input C;
    input D;
    input Enabled;
    input P;
   output SegA;
   output SegB;
   output SegC;
   output SegD;
   output SegE;
   output SegF;
   output SegG;
   output SegP;
   
   wire m;
   wire n;
   wire o;
   wire s;
   wire x;
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_46;
   wire XLXN_48;
   wire XLXN_58;
   wire XLXN_107;
   wire XLXN_110;
   wire XLXN_112;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_116;
   wire XLXN_120;
   wire XLXN_122;
   wire XLXN_136;
   wire XLXN_139;
   wire XLXN_146;
   wire XLXN_147;
   wire XLXN_211;
   wire XLXN_214;
   wire XLXN_215;
   wire XLXN_219;
   wire XLXN_222;
   wire XLXN_223;
   wire XLXN_236;
   wire XLXN_240;
   wire XLXN_246;
   wire XLXN_253;
   wire XLXN_258;
   wire XLXN_260;
   wire XLXN_265;
   wire XLXN_267;
   wire XLXN_278;
   wire XLXN_286;
   wire XLXN_290;
   wire XLXN_348;
   
   OR3  XLXI_1 (.I0(XLXN_3), 
               .I1(XLXN_2), 
               .I2(D), 
               .O(m));
   INV  XLXI_2 (.I(C), 
               .O(XLXN_2));
   XNOR2  XLXI_3 (.I0(B), 
                 .I1(A), 
                 .O(XLXN_3));
   OR4  XLXI_4 (.I0(D), 
               .I1(C), 
               .I2(XLXN_4), 
               .I3(A), 
               .O(o));
   INV  XLXI_5 (.I(B), 
               .O(XLXN_4));
   OR2  XLXI_6 (.I0(XLXN_7), 
               .I1(XLXN_6), 
               .O(XLXN_5));
   XOR2  XLXI_7 (.I0(B), 
                .I1(A), 
                .O(XLXN_7));
   AND2  XLXI_8 (.I0(XLXN_8), 
                .I1(XLXN_5), 
                .O(XLXN_46));
   OR3  XLXI_9 (.I0(XLXN_9), 
               .I1(B), 
               .I2(C), 
               .O(XLXN_8));
   INV  XLXI_10 (.I(C), 
                .O(XLXN_6));
   INV  XLXI_11 (.I(A), 
                .O(XLXN_9));
   OR2  XLXI_12 (.I0(XLXN_278), 
                .I1(XLXN_18), 
                .O(XLXN_10));
   AND2  XLXI_13 (.I0(B), 
                 .I1(XLXN_12), 
                 .O(XLXN_278));
   INV  XLXI_14 (.I(D), 
                .O(XLXN_12));
   INV  XLXI_15 (.I(XLXN_286), 
                .O(XLXN_18));
   OR2  XLXI_16 (.I0(C), 
                .I1(B), 
                .O(XLXN_286));
   INV  XLXI_17 (.I(A), 
                .O(XLXN_20));
   OR3  XLXI_18 (.I0(XLXN_21), 
                .I1(C), 
                .I2(D), 
                .O(XLXN_58));
   XNOR2  XLXI_19 (.I0(A), 
                  .I1(B), 
                  .O(XLXN_21));
   OR3  XLXI_20 (.I0(XLXN_24), 
                .I1(XLXN_290), 
                .I2(D), 
                .O(XLXN_22));
   INV  XLXI_21 (.I(A), 
                .O(XLXN_290));
   INV  XLXI_22 (.I(B), 
                .O(XLXN_24));
   OR2  XLXI_23 (.I0(XLXN_25), 
                .I1(D), 
                .O(XLXN_110));
   AND2  XLXI_24 (.I0(XLXN_114), 
                 .I1(XLXN_112), 
                 .O(XLXN_25));
   OR2  XLXI_25 (.I0(C), 
                .I1(B), 
                .O(XLXN_112));
   AND3  XLXI_26 (.I0(C), 
                 .I1(B), 
                 .I2(A), 
                 .O(XLXN_113));
   INV  XLXI_27 (.I(XLXN_113), 
                .O(XLXN_114));
   INV  XLXI_28 (.I(P), 
                .O(XLXN_116));
   INV  XLXI_29 (.I(XLXN_116), 
                .O(XLXN_267));
   OR3  XLXI_30 (.I0(XLXN_1), 
                .I1(D), 
                .I2(B), 
                .O(XLXN_122));
   XNOR2  XLXI_31 (.I0(C), 
                  .I1(A), 
                  .O(XLXN_1));
   AND3  XLXI_32 (.I0(XLXN_120), 
                 .I1(D), 
                 .I2(A), 
                 .O(n));
   XOR2  XLXI_33 (.I0(C), 
                 .I1(B), 
                 .O(XLXN_120));
   AND2  XLXI_34 (.I0(XLXN_136), 
                 .I1(D), 
                 .O(XLXN_147));
   OR2  XLXI_35 (.I0(XLXN_146), 
                .I1(XLXN_139), 
                .O(XLXN_136));
   AND2  XLXI_36 (.I0(B), 
                 .I1(A), 
                 .O(XLXN_139));
   OR2  XLXI_38 (.I0(D), 
                .I1(XLXN_46), 
                .O(XLXN_48));
   AND2  XLXI_45 (.I0(XLXN_10), 
                 .I1(XLXN_20), 
                 .O(s));
   AND2  XLXI_46 (.I0(XLXN_22), 
                 .I1(XLXN_58), 
                 .O(XLXN_107));
   AND3  XLXI_102 (.I0(XLXN_214), 
                  .I1(C), 
                  .I2(D), 
                  .O(XLXN_211));
   OR2B1  XLXI_103 (.I0(A), 
                   .I1(B), 
                   .O(XLXN_214));
   AND3  XLXI_107 (.I0(B), 
                  .I1(D), 
                  .I2(XLXN_219), 
                  .O(XLXN_215));
   XNOR2  XLXI_108 (.I0(A), 
                   .I1(C), 
                   .O(XLXN_219));
   AND2  XLXI_109 (.I0(D), 
                  .I1(XLXN_223), 
                  .O(XLXN_222));
   OR2  XLXI_110 (.I0(s), 
                 .I1(XLXN_222), 
                 .O(XLXN_258));
   OR2  XLXI_111 (.I0(B), 
                 .I1(C), 
                 .O(XLXN_223));
   AND4B1  XLXI_113 (.I0(B), 
                    .I1(A), 
                    .I2(C), 
                    .I3(D), 
                    .O(XLXN_236));
   AND4B2  XLXI_116 (.I0(A), 
                    .I1(B), 
                    .I2(C), 
                    .I3(D), 
                    .O(XLXN_240));
   AND2B1  XLXI_117 (.I0(n), 
                    .I1(XLXN_122), 
                    .O(x));
   AND2B1  XLXI_118 (.I0(XLXN_147), 
                    .I1(m), 
                    .O(XLXN_246));
   AND2B1  XLXI_119 (.I0(XLXN_211), 
                    .I1(o), 
                    .O(XLXN_348));
   AND2B1  XLXI_120 (.I0(XLXN_215), 
                    .I1(XLXN_48), 
                    .O(XLXN_253));
   AND2B1  XLXI_121 (.I0(XLXN_236), 
                    .I1(XLXN_107), 
                    .O(XLXN_260));
   AND2B1  XLXI_122 (.I0(XLXN_240), 
                    .I1(XLXN_110), 
                    .O(XLXN_265));
   AND2B1  XLXI_124 (.I0(A), 
                    .I1(C), 
                    .O(XLXN_146));
   AND2  XLXI_125 (.I0(x), 
                  .I1(Enabled), 
                  .O(SegA));
   AND2  XLXI_127 (.I0(Enabled), 
                  .I1(XLXN_246), 
                  .O(SegB));
   AND2  XLXI_128 (.I0(XLXN_348), 
                  .I1(Enabled), 
                  .O(SegC));
   AND2  XLXI_129 (.I0(XLXN_253), 
                  .I1(Enabled), 
                  .O(SegD));
   AND2  XLXI_130 (.I0(XLXN_258), 
                  .I1(Enabled), 
                  .O(SegE));
   AND2  XLXI_131 (.I0(XLXN_260), 
                  .I1(Enabled), 
                  .O(SegF));
   AND2  XLXI_132 (.I0(XLXN_265), 
                  .I1(Enabled), 
                  .O(SegG));
   AND2  XLXI_133 (.I0(XLXN_267), 
                  .I1(Enabled), 
                  .O(SegP));
endmodule
`timescale 1ns / 1ps

module Test(P45, 
            P47, 
            P123, 
            Slide_SW, 
            com0, 
            com1, 
            com2, 
            com3, 
            P26, 
            P27, 
            P29, 
            P32, 
            P34, 
            P35, 
            P40, 
            P41);

   (* CLOCK_DEDICATED_ROUTE = "FALSE" *) 
    input P45;
    input P47;
    input P123;
   (* CLOCK_DEDICATED_ROUTE = "FALSE" *) 
    input Slide_SW;
   output com0;
   output com1;
   output com2;
   output com3;
   output P26;
   output P27;
   output P29;
   output P32;
   output P34;
   output P35;
   output P40;
   output P41;
   
   wire [3:0] data;
   wire XLXN_1;
   wire XLXN_9;
   
   SvnEnable_MUSER_Test  XLXI_12 (.A(data[0]), 
                                 .B(data[1]), 
                                 .C(data[2]), 
                                 .D(data[3]), 
                                 .Enabled(XLXN_1), 
                                 .P(XLXN_9), 
                                 .SegA(P41), 
                                 .SegB(P40), 
                                 .SegC(P35), 
                                 .SegD(P34), 
                                 .SegE(P32), 
                                 .SegF(P29), 
                                 .SegG(P27), 
                                 .SegP(P26));
   VCC  XLXI_14 (.P(XLXN_1));
   GND  XLXI_19 (.G(XLXN_9));
   Increase_MUSER_Test  XLXI_29 (.Clk(P123), 
                                .E(Slide_SW), 
                                .number(P47), 
                                .Shift(P45), 
                                .com0(com0), 
                                .com1(com1), 
                                .com2(com2), 
                                .com3(com3), 
                                .data(data[3:0]));
endmodule
