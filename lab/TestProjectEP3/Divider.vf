////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Divider.vf
// /___/   /\     Timestamp : 11/17/2019 17:29:56
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/work/2D/Digital/lab/TestProjectEP3/Divider.vf -w D:/work/2D/Digital/lab/TestProjectEP3/Divider.sch
//Design Name: Divider
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_Divider(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_Divider(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 1ns / 1ps

module Divider(Clk_In, 
               Clk_Out);

    input Clk_In;
   output Clk_Out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_21;
   wire XLXN_30;
   wire XLXN_31;
   
   (* HU_SET = "XLXI_1_72" *) 
   CD4RE_HXILINX_Divider  XLXI_1 (.C(Clk_In), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_10));
   (* HU_SET = "XLXI_2_73" *) 
   CD4RE_HXILINX_Divider  XLXI_2 (.C(XLXN_11), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_8));
   (* HU_SET = "XLXI_3_74" *) 
   CD4RE_HXILINX_Divider  XLXI_3 (.C(XLXN_9), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_6));
   (* HU_SET = "XLXI_4_75" *) 
   CD4RE_HXILINX_Divider  XLXI_4 (.C(XLXN_7), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_12));
   (* HU_SET = "XLXI_5_76" *) 
   CD4RE_HXILINX_Divider  XLXI_5 (.C(XLXN_1), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_2));
   (* HU_SET = "XLXI_6_77" *) 
   CD4RE_HXILINX_Divider  XLXI_6 (.C(XLXN_5), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_30));
   (* HU_SET = "XLXI_7_78" *) 
   CD4RE_HXILINX_Divider  XLXI_7 (.C(XLXN_3), 
                                 .CE(XLXN_21), 
                                 .R(XLXN_13), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_4));
   INV  XLXI_8 (.I(XLXN_10), 
               .O(XLXN_11));
   INV  XLXI_9 (.I(XLXN_8), 
               .O(XLXN_9));
   INV  XLXI_10 (.I(XLXN_6), 
                .O(XLXN_7));
   INV  XLXI_11 (.I(XLXN_12), 
                .O(XLXN_1));
   INV  XLXI_12 (.I(XLXN_2), 
                .O(XLXN_3));
   INV  XLXI_13 (.I(XLXN_4), 
                .O(XLXN_5));
   VCC  XLXI_14 (.P(XLXN_21));
   GND  XLXI_15 (.G(XLXN_13));
   (* HU_SET = "XLXI_16_79" *) 
   FTC_HXILINX_Divider  XLXI_16 (.C(XLXN_31), 
                                .CLR(XLXN_13), 
                                .T(XLXN_21), 
                                .Q(Clk_Out));
   INV  XLXI_18 (.I(XLXN_30), 
                .O(XLXN_31));
endmodule
