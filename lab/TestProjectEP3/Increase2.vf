////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Increase2.vf
// /___/   /\     Timestamp : 11/18/2019 00:39:14
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog D:/work/2D/Digital/lab/TestProjectEP3/Increase2.vf -w D:/work/2D/Digital/lab/TestProjectEP3/Increase2.sch
//Design Name: Increase2
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4RE_HXILINX_Increase2(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1, Q0} <= {Q3, Q2, Q1, Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_Increase2(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2RE_HXILINX_Increase2(CEO, Q0, Q1, TC, C, CE, R);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C)
     begin
	if (R)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT); 
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Increase2 (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_Increase2 (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB4RE_HXILINX_Increase2(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   localparam TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3,Q2,Q1,Q0} <= {Q3,Q2,Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q3,Q2,Q1,Q0} == TERMINAL_COUNT); 
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Increase2(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module DividerForNumber_MUSER_Increase2(Clk_In, 
                                        Clk_Out);

    input Clk_In;
   output Clk_Out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_15;
   wire XLXN_17;
   wire XLXN_31;
   
   (* HU_SET = "XLXI_1_42" *) 
   CD4RE_HXILINX_Increase2  XLXI_1 (.C(Clk_In), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_17), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_9));
   (* HU_SET = "XLXI_2_43" *) 
   CD4RE_HXILINX_Increase2  XLXI_2 (.C(XLXN_8), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_17), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_5));
   (* HU_SET = "XLXI_3_44" *) 
   CD4RE_HXILINX_Increase2  XLXI_3 (.C(XLXN_6), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_17), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_13));
   (* HU_SET = "XLXI_4_45" *) 
   CD4RE_HXILINX_Increase2  XLXI_4 (.C(XLXN_10), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_17), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_7));
   INV  XLXI_5 (.I(XLXN_9), 
               .O(XLXN_10));
   INV  XLXI_6 (.I(XLXN_7), 
               .O(XLXN_8));
   INV  XLXI_7 (.I(XLXN_5), 
               .O(XLXN_6));
   VCC  XLXI_8 (.P(XLXN_12));
   GND  XLXI_9 (.G(XLXN_17));
   INV  XLXI_10 (.I(XLXN_13), 
                .O(XLXN_15));
   (* HU_SET = "XLXI_11_46" *) 
   CD4RE_HXILINX_Increase2  XLXI_11 (.C(XLXN_15), 
                                    .CE(XLXN_12), 
                                    .R(XLXN_17), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_1));
   INV  XLXI_12 (.I(XLXN_1), 
                .O(XLXN_2));
   (* HU_SET = "XLXI_13_47" *) 
   CD4RE_HXILINX_Increase2  XLXI_13 (.C(XLXN_2), 
                                    .CE(XLXN_12), 
                                    .R(XLXN_17), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_3));
   INV  XLXI_14 (.I(XLXN_3), 
                .O(XLXN_4));
   (* HU_SET = "XLXI_15_48" *) 
   CD4RE_HXILINX_Increase2  XLXI_15 (.C(XLXN_4), 
                                    .CE(XLXN_12), 
                                    .R(XLXN_31), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(XLXN_31), 
                                    .Q3(), 
                                    .TC());
   (* HU_SET = "XLXI_16_49" *) 
   FTC_HXILINX_Increase2  XLXI_16 (.C(XLXN_31), 
                                  .CLR(XLXN_17), 
                                  .T(XLXN_12), 
                                  .Q(Clk_Out));
endmodule
`timescale 1ns / 1ps

module DividerFor7segment_MUSER_Increase2(Clk_in, 
                                          Clk_out);

    input Clk_in;
   output Clk_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_9;
   wire XLXN_12;
   wire XLXN_16;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire Clk_out_DUMMY;
   
   assign Clk_out = Clk_out_DUMMY;
   (* HU_SET = "XLXI_1_50" *) 
   CB4RE_HXILINX_Increase2  XLXI_1 (.C(Clk_in), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_9), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_1));
   (* HU_SET = "XLXI_2_51" *) 
   CB4RE_HXILINX_Increase2  XLXI_2 (.C(XLXN_2), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_9), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_3));
   (* HU_SET = "XLXI_3_52" *) 
   CB4RE_HXILINX_Increase2  XLXI_3 (.C(XLXN_4), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_9), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_5));
   (* HU_SET = "XLXI_4_53" *) 
   CB4RE_HXILINX_Increase2  XLXI_4 (.C(XLXN_6), 
                                   .CE(XLXN_12), 
                                   .R(XLXN_9), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_7));
   INV  XLXI_5 (.I(XLXN_1), 
               .O(XLXN_2));
   INV  XLXI_7 (.I(XLXN_3), 
               .O(XLXN_4));
   INV  XLXI_8 (.I(XLXN_5), 
               .O(XLXN_6));
   FDR  XLXI_9 (.C(XLXN_32), 
               .D(XLXN_16), 
               .R(XLXN_9), 
               .Q(Clk_out_DUMMY));
   INV  XLXI_11 (.I(Clk_out_DUMMY), 
                .O(XLXN_16));
   VCC  XLXI_12 (.P(XLXN_12));
   GND  XLXI_13 (.G(XLXN_9));
   (* HU_SET = "XLXI_14_54" *) 
   CB4RE_HXILINX_Increase2  XLXI_14 (.C(XLXN_33), 
                                    .CE(XLXN_12), 
                                    .R(XLXN_9), 
                                    .CEO(), 
                                    .Q0(), 
                                    .Q1(), 
                                    .Q2(), 
                                    .Q3(), 
                                    .TC(XLXN_31));
   INV  XLXI_15 (.I(XLXN_31), 
                .O(XLXN_32));
   INV  XLXI_16 (.I(XLXN_7), 
                .O(XLXN_33));
endmodule
`timescale 1ns / 1ps

module Increase2(Clk, 
                 E, 
                 number, 
                 Shift, 
                 com0, 
                 com1, 
                 com2, 
                 com3, 
                 data);

    input Clk;
    input E;
    input number;
    input Shift;
   output com0;
   output com1;
   output com2;
   output com3;
   output [3:0] data;
   
   wire Add;
   wire Enable;
   wire [3:0] ind0;
   wire [3:0] ind1;
   wire [3:0] ind2;
   wire [3:0] ind3;
   wire XLXN_1;
   wire XLXN_27;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_42;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_123;
   wire XLXN_124;
   wire XLXN_125;
   wire XLXN_126;
   wire XLXN_169;
   wire XLXN_181;
   wire XLXN_224;
   wire XLXN_230;
   wire XLXN_236;
   
   (* HU_SET = "XLXI_1_55" *) 
   D2_4E_HXILINX_Increase2  XLXI_1 (.A0(XLXN_1), 
                                   .A1(XLXN_27), 
                                   .E(E), 
                                   .D0(XLXN_36), 
                                   .D1(XLXN_236), 
                                   .D2(XLXN_42), 
                                   .D3(XLXN_224));
   (* HU_SET = "XLXI_2_56" *) 
   CD4RE_HXILINX_Increase2  XLXI_2 (.C(Add), 
                                   .CE(XLXN_42), 
                                   .R(XLXN_38), 
                                   .CEO(), 
                                   .Q0(ind2[0]), 
                                   .Q1(ind2[1]), 
                                   .Q2(ind2[2]), 
                                   .Q3(ind2[3]), 
                                   .TC());
   (* HU_SET = "XLXI_3_57" *) 
   CD4RE_HXILINX_Increase2  XLXI_3 (.C(Add), 
                                   .CE(XLXN_236), 
                                   .R(XLXN_38), 
                                   .CEO(), 
                                   .Q0(ind1[0]), 
                                   .Q1(ind1[1]), 
                                   .Q2(ind1[2]), 
                                   .Q3(ind1[3]), 
                                   .TC());
   (* HU_SET = "XLXI_4_62" *) 
   CD4RE_HXILINX_Increase2  XLXI_4 (.C(Add), 
                                   .CE(XLXN_224), 
                                   .R(XLXN_38), 
                                   .CEO(), 
                                   .Q0(ind3[0]), 
                                   .Q1(ind3[1]), 
                                   .Q2(ind3[2]), 
                                   .Q3(ind3[3]), 
                                   .TC());
   GND  XLXI_6 (.G(XLXN_38));
   (* HU_SET = "XLXI_7_63" *) 
   CB2RE_HXILINX_Increase2  XLXI_7 (.C(XLXN_230), 
                                   .CE(Enable), 
                                   .R(XLXN_38), 
                                   .CEO(), 
                                   .Q0(XLXN_110), 
                                   .Q1(XLXN_111), 
                                   .TC());
   DividerFor7segment_MUSER_Increase2  XLXI_8 (.Clk_in(Clk), 
                                              .Clk_out(XLXN_230));
   (* HU_SET = "XLXI_9_66" *) 
   CD4RE_HXILINX_Increase2  XLXI_9 (.C(Add), 
                                   .CE(XLXN_36), 
                                   .R(XLXN_38), 
                                   .CEO(), 
                                   .Q0(ind0[0]), 
                                   .Q1(ind0[1]), 
                                   .Q2(ind0[2]), 
                                   .Q3(ind0[3]), 
                                   .TC());
   (* HU_SET = "XLXI_16_0_61" *) 
   M4_1E_HXILINX_Increase2  XLXI_16_0 (.D0(ind0[0]), 
                                      .D1(ind1[0]), 
                                      .D2(ind2[0]), 
                                      .D3(ind3[0]), 
                                      .E(Enable), 
                                      .S0(XLXN_110), 
                                      .S1(XLXN_111), 
                                      .O(data[0]));
   (* HU_SET = "XLXI_16_1_60" *) 
   M4_1E_HXILINX_Increase2  XLXI_16_1 (.D0(ind0[1]), 
                                      .D1(ind1[1]), 
                                      .D2(ind2[1]), 
                                      .D3(ind3[1]), 
                                      .E(Enable), 
                                      .S0(XLXN_110), 
                                      .S1(XLXN_111), 
                                      .O(data[1]));
   (* HU_SET = "XLXI_16_2_59" *) 
   M4_1E_HXILINX_Increase2  XLXI_16_2 (.D0(ind0[2]), 
                                      .D1(ind1[2]), 
                                      .D2(ind2[2]), 
                                      .D3(ind3[2]), 
                                      .E(Enable), 
                                      .S0(XLXN_110), 
                                      .S1(XLXN_111), 
                                      .O(data[2]));
   (* HU_SET = "XLXI_16_3_58" *) 
   M4_1E_HXILINX_Increase2  XLXI_16_3 (.D0(ind0[3]), 
                                      .D1(ind1[3]), 
                                      .D2(ind2[3]), 
                                      .D3(ind3[3]), 
                                      .E(Enable), 
                                      .S0(XLXN_110), 
                                      .S1(XLXN_111), 
                                      .O(data[3]));
   (* HU_SET = "XLXI_18_65" *) 
   D2_4E_HXILINX_Increase2  XLXI_18 (.A0(XLXN_110), 
                                    .A1(XLXN_111), 
                                    .E(Enable), 
                                    .D0(XLXN_123), 
                                    .D1(XLXN_124), 
                                    .D2(XLXN_125), 
                                    .D3(XLXN_126));
   AND2  XLXI_27 (.I0(XLXN_169), 
                 .I1(number), 
                 .O(Add));
   DividerForNumber_MUSER_Increase2  XLXI_28 (.Clk_In(Clk), 
                                             .Clk_Out(XLXN_169));
   VCC  XLXI_29 (.P(Enable));
   INV  XLXI_33 (.I(E), 
                .O(XLXN_181));
   (* HU_SET = "XLXI_34_64" *) 
   CB2CE_HXILINX_Increase2  XLXI_34 (.C(Shift), 
                                    .CE(E), 
                                    .CLR(XLXN_181), 
                                    .CEO(), 
                                    .Q0(XLXN_1), 
                                    .Q1(XLXN_27), 
                                    .TC());
   INV  XLXI_39 (.I(XLXN_123), 
                .O(com0));
   INV  XLXI_40 (.I(XLXN_124), 
                .O(com1));
   INV  XLXI_41 (.I(XLXN_125), 
                .O(com2));
   INV  XLXI_42 (.I(XLXN_126), 
                .O(com3));
endmodule
